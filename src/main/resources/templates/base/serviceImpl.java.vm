package ${package.ServiceImpl};

## ------参数设置----start
###foreach($field in ${table.fields})
##    #if(${field.keyFlag})
##        #set($primaryKeyPropertyType=${field.propertyType})
##        #break
##    #end
###end
#set($entityInsertDTO = "${entity}InsertDTO")
#set($entityUpdateDTO = "${entity}UpdateDTO")
#set($entityVO = "${entity}VO")
#if(${selectDTO.classFullName})
    #set($entitySelectDTO = ${selectDTO.clazz("${entity}")})
    #if(${generateSelect}||${generateExport})
import ${selectDTO.classFullName};
    #end
#else
    #set($entitySelectDTO = "${entity}SelectDTO")
    #if(${generateSelect}||${generateExport})
import ${basePackage}.${package4DTO}.${entity}SelectDTO;
    #end
#end
## ------参数设置----end
#if(${generateImport}||${generateExport})
import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.write.style.column.LongestMatchColumnWidthStyleStrategy;
#end
#if(${generateSelect}||${generateExport})
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end
#if(${generateInsert}||${generateSelect})
import com.baomidou.mybatisplus.core.metadata.TableInfo;
import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
#end
import ${superServiceImplClassPackage};
import ${package.Service}.${table.serviceName};
import ${package.Mapper}.${table.mapperName};
import ${package.Entity}.${entity};
#if(${generateSelect}||${generateExport})
import ${basePackage}.${package4VO}.${entityVO};
#end
#if(${generateInsert}||${generateImport})
import ${basePackage}.${package4DTO}.${entityInsertDTO};
#end
#if(${generateUpdate})
import ${basePackage}.${package4DTO}.${entityUpdateDTO};
#end
import org.springframework.stereotype.Service;
#if(${generateInsert}||${generateUpdate}||${generateImport}||${generateSelect})
import org.springframework.beans.BeanUtils;
#end

#if(${generateSelect}||${generateDelete})
import java.io.Serializable;
#end
#if(${generateImport})
import java.io.InputStream;
#end
#if(${generateImport}||${generateExport})
import java.io.OutputStream;
#end
#if(${generateImport})
import java.util.stream.Collectors;
#end
import java.util.*;

/**
 * $!{table.comment}服务实现类
 *
 * @author ${author}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>() implements ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {
    #if(${generateInsert})

    @Override
    public Object insertByDTO(${entityInsertDTO} param) {
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(param, entity);
        super.save(entity);
        TableInfo tableInfo = TableInfoHelper.getTableInfo(getEntityClass());
        return tableInfo.getPropertyValue(entity, tableInfo.getKeyProperty());
    }
    #end
    #if(${generateUpdate})

    @Override
    public boolean updateByDTO(${entityUpdateDTO} param) {
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(param, entity);
        return super.updateById(entity);
    }
    #end
    #if(${generateDelete})

    @Override
    public boolean removeById(Serializable id) {
        return super.removeById(id);
    }
    #end
    #if(${generateSelect})

    public List<${entityVO}> doSelect(${entitySelectDTO} param, IPage<${entityVO}> page) {
##//        ${entitySelectDTO} dto = (${entitySelectDTO}) param;
##        Map<Object, Object> map = null;
##        if (param == null || param instanceof Map) {
##            map = param == null ? new HashMap<>() : (Map<Object, Object>) param;
##        } else {
##            map = new HashMap<>();
##            List<Field> fields = new ArrayList<>();
##            Class<?> currentClass = param.getClass();
##            while (currentClass != null && currentClass != Object.class && !currentClass.isInterface()) {
##                Arrays.stream(currentClass.getDeclaredFields()).filter(f -> !Modifier.isStatic(f.getModifiers()))
##                        .filter(f -> !Modifier.isFinal(f.getModifiers())).filter(f -> !Modifier.isNative(f.getModifiers()))
##                        .peek(f -> f.setAccessible(true)).forEach(fields::add);
##                currentClass = currentClass.getSuperclass();
##            }
##            try {
##                for (Field field : fields) {
##                    Object key = field.getName();
##                    Object value = field.get(param);
##                    if (value != null) map.put(key, value);
##                }
##            } catch (Exception e) {
##                throw new RuntimeException(e);
##            }
##        }
        return getBaseMapper().listByDTO(param, page);
    }

    @Override
    public ${entityVO} oneById(Serializable id) {
        ${entity} entity = new ${entity}();
        TableInfo tableInfo = TableInfoHelper.getTableInfo(getEntityClass());
        tableInfo.setPropertyValue(entity, tableInfo.getKeyProperty(), id);
        ${entitySelectDTO} param = new ${entitySelectDTO}();
        BeanUtils.copyProperties(entity, param);
        return oneByDTO(param);
    }

    @Override
    public ${entityVO} oneByDTO(${entitySelectDTO} param) {
        List<${entityVO}> vs = listByDTO(param);
        if (vs == null || vs.isEmpty()) return null;
        if (vs.size() > 1) throw new RuntimeException("error query => required 1 but found " + vs.size());
        return vs.get(0);
    }

    @Override
    public List<${entityVO}> listByDTO(${entitySelectDTO} param) {
        return doSelect(param, null);
    }

    @Override
    public IPage<${entityVO}> pageByDTO(${entitySelectDTO} param, Long current, Long size) {
        if (current == null || current < 1) current = 1L;
        if (size == null) size = 10L;
        Page<${entityVO}> page = new Page<>(current, size);
        List<${entityVO}> voList = doSelect(param, page);
        page.setRecords(voList);
        return page;
    }
    #end
    #if(${generateImport})

    @Override
    public void excelTemplate(OutputStream os, Class<?> clazz) {
        EasyExcel.write(os, clazz)
            .registerWriteHandler(new LongestMatchColumnWidthStyleStrategy())
            .sheet()
            .doWrite(Collections.emptyList());
    }

    @Override
    public int excelImport(InputStream is, Class<?> clazz) {
//        List<${entityInsertDTO}> dataList = EasyExcel.read(is).head(clazz).sheet().doReadSync();
        List<?> dataList = EasyExcel.read(is).head(clazz).sheet().doReadSync();
        List<${entity}> entityList = dataList.stream().map(e -> {
            ${entity} entity = new ${entity}();
            BeanUtils.copyProperties(e, entity);
            return entity;
        }).collect(Collectors.toList());
        super.saveBatch(entityList);
        return entityList.size();
    }
    #end
    #if(${generateExport})

    @Override
    public void excelExport(${entitySelectDTO} s, OutputStream os, Class<?> clazz, Long current, Long size, String... includeFields) {
        #if(${generateSelect})
        List<${entityVO}> voList = pageByDTO(s, current, size).getRecords();
            #else
        if (current == null || current < 1) current = 1L;
        if (size == null) size = 10L;
        Page<${entityVO}> page = new Page<>(current, size);
        List<${entityVO}> voList = getBaseMapper().listByDTO(s, page);
        #end
        EasyExcel.write(os, clazz)
            .includeColumnFieldNames(Arrays.asList(includeFields))
            .registerWriteHandler(new LongestMatchColumnWidthStyleStrategy())
            .sheet()
            .doWrite(voList);
    }
    #end

}
#end
